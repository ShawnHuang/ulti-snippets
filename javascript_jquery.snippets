###########################################################################
#                            snipMate snippets                            #
###########################################################################
snippet add
${1:obj}.add('${2:selector expression}')${3}
endsnippet
snippet addClass
${1:obj}.addClass('${2:class name}')${3}
endsnippet
snippet after
${1:obj}.after('${2:Some text <b>and bold!</b>}')${3}
endsnippet
snippet ajax
$.ajax({
	url: '${1:mydomain.com/url}',
	type: '${2:POST}',
	dataType: '${3:xml/html/script/json}',
	data: $.param( $('${4:Element or Expression}') ),
	complete: function (jqXHR, textStatus) {
		${5:// callback}
	},
	success: function (data, textStatus, jqXHR) {
		${6:// success callback}
	},
	error: function (jqXHR, textStatus, errorThrown) {
		${7:// error callback}
	}
});
endsnippet
snippet ajaxcomplete
${1:obj}.ajaxComplete(function (${1:e}, xhr, settings) {
	${2:// callback}
});
endsnippet
snippet ajaxerror
${1:obj}.ajaxError(function (${1:e}, xhr, settings, thrownError) {
	${2:// error callback}
});
${3}
endsnippet
snippet ajaxget
$.get('${1:mydomain.com/url}',
	${2:{ param1: value1 },}
	function (data, textStatus, jqXHR) {
		${3:// success callback}
	}
);
endsnippet
snippet ajaxpost
$.post('${1:mydomain.com/url}',
	${2:{ param1: value1 },}
	function (data, textStatus, jqXHR) {
		${3:// success callback}
	}
);
endsnippet
snippet ajaxprefilter
$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {
	${3: // Modify options, control originalOptions, store jqXHR, etc}
});
endsnippet
snippet ajaxsend
${1:obj}.ajaxSend(function (${1:request, settings}) {
	${2:// error callback}
});
${3}
endsnippet
snippet ajaxsetup
$.ajaxSetup({
	url: "${1:mydomain.com/url}",
	type: "${2:POST}",
	dataType: "${3:xml/html/script/json}",
	data: $.param( $("${4:Element or Expression}") ),
	complete: function (jqXHR, textStatus) {
		${5:// callback}
	},
	success: function (data, textStatus, jqXHR) {
		${6:// success callback}
	},
	error: function (jqXHR, textStatus, errorThrown) {
		${7:// error callback}
	}
});
endsnippet
snippet ajaxstart
$.ajaxStart(function () {
	${1:// handler for when an AJAX call is started and no other AJAX calls are in progress};
});
${2}
endsnippet
snippet ajaxstop
$.ajaxStop(function () {
	${1:// handler for when all AJAX calls have been completed};
});
${2}
endsnippet
snippet ajaxsuccess
$.ajaxSuccess(function (${1:e}, xhr, settings) {
	${2:// handler for when any AJAX call is successfully completed};
});
${2}
endsnippet
snippet andself
${1:obj}.andSelf()${2}
endsnippet
snippet animate
${1:obj}.animate({${2:param1: value1, param2: value2}}, ${3:speed})${4}
endsnippet
snippet append
${1:obj}.append('${2:Some text <b>and bold!</b>}')${3}
endsnippet
snippet appendTo
${1:obj}.appendTo('${2:selector expression}')${3}
endsnippet
snippet attr
${1:obj}.attr('${2:attribute}', '${3:value}')${4}
endsnippet
snippet attrm
${1:obj}.attr({'${2:attr1}': '${3:value1}', '${4:attr2}': '${5:value2}'})${6}
endsnippet
snippet before
${1:obj}.before('${2:Some text <b>and bold!</b>}')${3}
endsnippet
snippet bind
${1:obj}.bind('${2:event name}', function (${3:e}) {
	${4:// event handler}
});
endsnippet
snippet blur
${1:obj}.blur(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet C
$.Callbacks()${1}
endsnippet
snippet Cadd
${1:callbacks}.add(${2:callbacks})${3}
endsnippet
snippet Cdis
${1:callbacks}.disable()${2}
endsnippet
snippet Cempty
${1:callbacks}.empty()${2}
endsnippet
snippet Cfire
${1:callbacks}.fire(${2:args})${3}
endsnippet
snippet Cfired
${1:callbacks}.fired()${2}
endsnippet
snippet Cfirew
${1:callbacks}.fireWith(${2:this}, ${3:args})${4}
endsnippet
snippet Chas
${1:callbacks}.has(${2:callback})${3}
endsnippet
snippet Clock
${1:callbacks}.lock()${2}
endsnippet
snippet Clocked
${1:callbacks}.locked()${2}
endsnippet
snippet Crem
${1:callbacks}.remove(${2:callbacks})${3}
endsnippet
snippet change
${1:obj}.change(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet children
${1:obj}.children('${2:selector expression}')${3}
endsnippet
snippet clearq
${1:obj}.clearQueue(${2:'queue name'})${3}
endsnippet
snippet click
${1:obj}.click(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet clone
${1:obj}.clone()${2}
endsnippet
snippet contains
$.contains(${1:container}, ${2:contents});
endsnippet
snippet css
${1:obj}.css('${2:attribute}', '${3:value}')${4}
endsnippet
snippet csshooks
$.cssHooks['${1:CSS prop}'] = {
	get: function (elem, computed, extra) {
		${2: // handle getting the CSS property}
	},
	set: function (elem, value) {
		${3: // handle setting the CSS value}
	}
};
endsnippet
snippet cssm
${1:obj}.css({${2:attribute1}: '${3:value1}', ${4:attribute2}: '${5:value2}'})${6}
endsnippet
snippet D
$.Deferred()${1}
endsnippet
snippet Dalways
${1:deferred}.always(${2:callbacks})${3}
endsnippet
snippet Ddone
${1:deferred}.done(${2:callbacks})${3}
endsnippet
snippet Dfail
${1:deferred}.fail(${2:callbacks})${3}
endsnippet
snippet Disrej
${1:deferred}.isRejected()${2}
endsnippet
snippet Disres
${1:deferred}.isResolved()${2}
endsnippet
snippet Dnotify
${1:deferred}.notify(${2:args})${3}
endsnippet
snippet Dnotifyw
${1:deferred}.notifyWith(${2:this}, ${3:args})${4}
endsnippet
snippet Dpipe
${1:deferred}.then(${2:doneFilter}, ${3:failFilter}, ${4:progressFilter})${5}
endsnippet
snippet Dprog
${1:deferred}.progress(${2:callbacks})${3}
endsnippet
snippet Dprom
${1:deferred}.promise(${2:target})${3}
endsnippet
snippet Drej
${1:deferred}.reject(${2:args})${3}
endsnippet
snippet Drejw
${1:deferred}.rejectWith(${2:this}, ${3:args})${4}
endsnippet
snippet Dres
${1:deferred}.resolve(${2:args})${3}
endsnippet
snippet Dresw
${1:deferred}.resolveWith(${2:this}, ${3:args})${4}
endsnippet
snippet Dstate
${1:deferred}.state()${2}
endsnippet
snippet Dthen
${1:deferred}.then(${2:doneCallbacks}, ${3:failCallbacks}, ${4:progressCallbacks})${5}
endsnippet
snippet Dwhen
$.when(${1:deferreds})${2}
endsnippet
snippet data "(data)" w
data(${1:key}${2:,${3:value}})$0
endsnippet
snippet dataa
$.data('${1:selector expression}', '${2:key}'${3:, 'value'})${4}
endsnippet
snippet dblclick
${1:obj}.dblclick(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet delay
${1:obj}.delay('${2:slow/400/fast}'${3:, 'queue name'})${4}
endsnippet
snippet dele
${1:obj}.delegate('${2:selector expression}', '${3:event name}', function (${4:e}) {
	${5:// event handler}
});
endsnippet
snippet deq
${1:obj}.dequeue(${2:'queue name'})${3}
endsnippet
snippet deqq
$.dequeue('${1:selector expression}'${2:, 'queue name'})${3}
endsnippet
snippet detach
${1:obj}.detach('${2:selector expression}')${3}
endsnippet
snippet die
${1:obj}.die(${2:event}, ${3:handler})${4}
endsnippet
snippet each "(each)" w
each(function (index) {
	${1:this.innerHTML = this + " is the element, " + index + " is the position";}
});$0
endsnippet
snippet el
$('<${1}/>'${2:, {}})${3}
endsnippet
snippet eltrim
$.trim('${1:string}')${2}
endsnippet
snippet empty
${1:obj}.empty()${2}
endsnippet
snippet end
${1:obj}.end()${2}
endsnippet
snippet eq
${1:obj}.eq(${2:element index})${3}
endsnippet
snippet error
${1:obj}.error(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet eventsmap
{
	:f${1}
}
endsnippet
snippet extend
$.extend(${1:true, }${2:target}, ${3:obj})${4}
endsnippet
snippet fadein
${1:obj}.fadeIn('${2:slow/400/fast}')${3}
endsnippet
snippet fadeinc
${1:obj}.fadeIn('slow/400/fast', function () {
	${2:// callback};
});
endsnippet
snippet fadeout
${1:obj}.fadeOut('${2:slow/400/fast}')${3}
endsnippet
snippet fadeoutc
${1:obj}.fadeOut('slow/400/fast', function () {
	${2:// callback};
});
endsnippet
snippet fadeto
${1:obj}.fadeTo('${2:slow/400/fast}', ${3:0.5})${4}
endsnippet
snippet fadetoc
${1:obj}.fadeTo('slow/400/fast', ${2:0.5}, function () {
	${3:// callback};
});
endsnippet
snippet filter
${1:obj}.filter('${2:selector expression}')${3}
endsnippet
snippet filtert
${1:obj}.filter(function (${2:index}) {
	${3:// test code}
})${4}
endsnippet
snippet find
${1:obj}.find('${2:selector expression}')${3}
endsnippet
snippet focus
${1:obj}.focus(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet focusin
${1:obj}.focusIn(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet focusout
${1:obj}.focusOut(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet $get
${1:obj}.get(${2:element index})${3}
endsnippet
snippet getjson
$.getJSON('${1:mydomain.com/url}',
	${2:{ param1: value1 },}
	function (data, textStatus, jqXHR) {
		${3:// success callback}
	}
);
endsnippet
snippet getscript
$.getScript('${1:mydomain.com/url}', function (script, textStatus, jqXHR) {
	${2:// callback}
});
endsnippet
snippet grep
$.grep(${1:array}, function (item, index) {
	${2:// test code}
}${3:, true});
endsnippet
snippet hasc
${1:obj}.hasClass('${2:className}')${3}
endsnippet
snippet hasd
$.hasData('${1:selector expression}');
endsnippet
snippet height
${1:obj}.height(${2:integer})${3}
endsnippet
snippet hide
${1:obj}.hide('${2:slow/400/fast}')${3}
endsnippet
snippet hidec
${1:obj}.hide('${2:slow/400/fast}', function () {
	${3:// callback}
});
endsnippet
snippet hover
${1:obj}.hover(function (${2:e}) {
	${3:// event handler}
}, function ($2) {
	${4:// event handler}
});${5}
endsnippet
snippet html
${1:obj}.html('${2:Some text <b>and bold!</b>}')${3}
endsnippet
snippet inarr
$.inArray(${1:value}, ${2:array});
endsnippet
snippet insa
${1:obj}.insertAfter('${2:selector expression}')${3}
endsnippet
snippet insb
${1:obj}.insertBefore('${2:selector expression}')${3}
endsnippet
snippet is
${1:obj}.is('${2:selector expression}')${3}
endsnippet
snippet isarr
$.isArray(${1:obj})${2}
endsnippet
snippet isempty
$.isEmptyObject(${1:obj})${2}
endsnippet
snippet isfunc
$.isFunction(${1:obj})${2}
endsnippet
snippet isnum
$.isNumeric(${1:value})${2}
endsnippet
snippet isobj
$.isPlainObject(${1:obj})${2}
endsnippet
snippet iswin
$.isWindow(${1:obj})${2}
endsnippet
snippet isxml
$.isXMLDoc(${1:node})${2}
endsnippet
snippet jj
$('${1:selector}')${2}
endsnippet
snippet kdown
${1:obj}.keydown(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet kpress
${1:obj}.keypress(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet kup
${1:obj}.keyup(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet last
${1:obj}.last('${1:selector expression}')${3}
endsnippet
snippet live
${1:obj}.live('${2:events}', function (${3:e}) {
	${4:// event handler}
});
endsnippet
snippet load
${1:obj}.load(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet loadf
${1:obj}.load('${2:mydomain.com/url}',
	${2:{ param1: value1 },}
	function (responseText, textStatus, xhr) {
		${3:// success callback}
	}
});
endsnippet
snippet makearray
$.makeArray(${1:obj});
endsnippet
snippet map
${1:obj}.map(function (${2:index}, ${3:element}) {
	${4:// callback}
});
endsnippet
snippet mapp
$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {
	${4:// callback}
});
endsnippet
snippet merge
$.merge(${1:target}, ${2:original});
endsnippet
snippet mdown
${1:obj}.mousedown(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet menter
${1:obj}.mouseenter(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet mleave
${1:obj}.mouseleave(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet mmove
${1:obj}.mousemove(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet mout
${1:obj}.mouseout(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet mover
${1:obj}.mouseover(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet mup
${1:obj}.mouseup(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet next
${1:obj}.next('${2:selector expression}')${3}
endsnippet
snippet nexta
${1:obj}.nextAll('${2:selector expression}')${3}
endsnippet
snippet nextu
${1:obj}.nextUntil('${2:selector expression}'${3:, 'filter expression'})${4}
endsnippet
snippet not
${1:obj}.not('${2:selector expression}')${3}
endsnippet
snippet off
${1:obj}.off('${2:events}', '${3:selector expression}'${4:, handler})${5}
endsnippet
snippet offset
${1:obj}.offset()${2}
endsnippet
snippet offsetp
${1:obj}.offsetParent()${2}
endsnippet
snippet on "(on)" w
on('${1:events}',${2: '${3:selector expression}',} ${4:function (${5:event}) {
	${6:// event handler}
}});$0
endsnippet
snippet one
${1:obj}.one('${2:event name}', function (${3:e}) {
	${4:// event handler}
});
endsnippet
snippet outerh
${1:obj}.outerHeight()${2}
endsnippet
snippet outerw
${1:obj}.outerWidth()${2}
endsnippet
snippet param
$.param(${1:obj})${2}
endsnippet
snippet parent
${1:obj}.parent('${2:selector expression}')${3}
endsnippet
snippet parents
${1:obj}.parents('${2:selector expression}')${3}
endsnippet
snippet parentsu
${1:obj}.parentsUntil('${2:selector expression}'${3:, 'filter expression'})${4}
endsnippet
snippet parsejson
$.parseJSON(${1:data})${2}
endsnippet
snippet parsexml
$.parseXML(${1:data})${2}
endsnippet
snippet pos
${1:obj}.position()${2}
endsnippet
snippet prepend
${1:obj}.prepend('${2:Some text <b>and bold!</b>}')${3}
endsnippet
snippet prependto
${1:obj}.prependTo('${2:selector expression}')${3}
endsnippet
snippet prev
${1:obj}.prev('${2:selector expression}')${3}
endsnippet
snippet preva
${1:obj}.prevAll('${2:selector expression}')${3}
endsnippet
snippet prevu
${1:obj}.prevUntil('${2:selector expression}'${3:, 'filter expression'})${4}
endsnippet
snippet promise
${1:obj}.promise(${2:'fx'}, ${3:target})${4}
endsnippet
snippet prop
${1:obj}.prop('${2:property name}')${3}
endsnippet
snippet proxy
$.proxy(${1:function}, ${2:this})${3}
endsnippet
snippet pushstack
${1:obj}.pushStack(${2:elements})${3}
endsnippet
snippet queue
${1:obj}.queue(${2:name}${3:, newQueue})${4}
endsnippet
snippet queuee
$.queue(${1:element}${2:, name}${3:, newQueue})${4}
endsnippet
snippet ready
$(function () {
	${1}
});
endsnippet
snippet rem
${1:obj}.remove()${2}
endsnippet
snippet rema
${1:obj}.removeAttr('${2:attribute name}')${3}
endsnippet
snippet remc
${1:obj}.removeClass('${2:class name}')${3}
endsnippet
snippet remd
${1:obj}.removeData('${2:key name}')${3}
endsnippet
snippet remdd
$.removeData(${1:element}${2:, 'key name}')${3}
endsnippet
snippet remp
${1:obj}.removeProp('${2:property name}')${3}
endsnippet
snippet repa
${1:obj}.replaceAll(${2:target})${3}
endsnippet
snippet repw
${1:obj}.replaceWith(${2:content})${3}
endsnippet
snippet reset
${1:obj}.reset(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet resize
${1:obj}.resize(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet scroll
${1:obj}.scroll(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet scrolll
${1:obj}.scrollLeft(${2:value})${3}
endsnippet
snippet scrollt
${1:obj}.scrollTop(${2:value})${3}
endsnippet
snippet sdown
${1:obj}.slideDown('${2:slow/400/fast}')${3}
endsnippet
snippet sdownc
${1:obj}.slideDown('${2:slow/400/fast}', function () {
	${3:// callback};
});
endsnippet
snippet select
${1:obj}.select(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet serialize
${1:obj}.serialize()${2}
endsnippet
snippet serializea
${1:obj}.serializeArray()${2}
endsnippet
snippet show
${1:obj}.show('${2:slow/400/fast}')${3}
endsnippet
snippet showc
${1:obj}.show('${2:slow/400/fast}', function () {
	${3:// callback}
});
endsnippet
snippet sib
${1:obj}.siblings('${2:selector expression}')${3}
endsnippet
snippet size
${1:obj}.size()${2}
endsnippet
snippet slice
${1:obj}.slice(${2:start}${3:, end})${4}
endsnippet
snippet stoggle
${1:obj}.slideToggle('${2:slow/400/fast}')${3}
endsnippet
snippet stop
${1:obj}.stop('${2:queue}', ${3:false}, ${4:false})${5}
endsnippet
snippet submit
${1:obj}.submit(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet sup
${1:obj}.slideUp('${2:slow/400/fast}')${3}
endsnippet
snippet supc
${1:obj}.slideUp('${2:slow/400/fast}', function () {
	${3:// callback};
});
endsnippet
snippet text
${1:obj}.text(${2:'some text'})${3}
endsnippet
snippet this
$(this)
endsnippet
snippet toarr
${1:obj}.toArray()
endsnippet
snippet tog
${1:obj}.toggle(function (${2:e}) {
	${3:// event handler}
}, function ($2) {
	${4:// event handler}
});
${4}
endsnippet
snippet togclass
${1:obj}.toggleClass('${2:class name}')${3}
endsnippet
snippet togsh
${1:obj}.toggle('${2:slow/400/fast}')${3}
endsnippet
snippet trig
${1:obj}.trigger('${2:event name}')${3}
endsnippet
snippet trigh
${1:obj}.triggerHandler('${2:event name}')${3}
endsnippet
snippet $trim
$.trim(${1:str})${2}
endsnippet
snippet $type
$.type(${1:obj})${2}
endsnippet
snippet unbind
${1:obj}.unbind('${2:event name}')${3}
endsnippet
snippet undele
${1:obj}.undelegate(${2:selector expression}, ${3:event}, ${4:handler})${5}
endsnippet
snippet uniq
$.unique(${1:array})${2}
endsnippet
snippet unload
${1:obj}.unload(function (${2:e}) {
	${3:// event handler}
});
endsnippet
snippet unwrap
${1:obj}.unwrap()${2}
endsnippet
snippet val
${1:obj}.val('${2:text}')${3}
endsnippet
snippet width
${1:obj}.width(${2:integer})${3}
endsnippet
snippet wrap
${1:obj}.wrap('${2:&lt;div class="extra-wrapper"&gt;&lt;/div&gt;}')${3}
endsnippet
# vim:ft=snippets:
